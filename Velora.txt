Great choice ‚Äî **Velora** is elegant, memorable, and brandable. Perfect for a travel app!

Since you're working with the **latest release of Next.js (likely 14+)**, and you want to enhance metadata (for SEO, social sharing, and PWA behavior), here‚Äôs a **complete guide** using the **App Router** and the latest best practices.

---

## ‚úÖ Metadata in Next.js 14+ (App Router)

Next.js now uses a `metadata` export inside layout or page files ‚Äî this can be **static or dynamic**.

---

### üîπ 1. **Basic Metadata Setup (`app/layout.tsx`)**

This applies site-wide.

```tsx
// app/layout.tsx or app/layout.js
export const metadata = {
  title: "Velora ‚Äì Your Elegant Travel Companion",
  description: "Plan, document, and share your journeys effortlessly with Velora ‚Äì a beautifully designed travel app.",
  keywords: ["Velora", "Travel App", "Travel Planner", "Travel Journal", "Trip Sharing", "Itinerary App"],
  authors: [{ name: "Your Name or Team" }],
  creator: "Velora",
  themeColor: "#ffffff",
  icons: {
    icon: "/favicon.ico",
    shortcut: "/favicon.ico",
    apple: "/apple-touch-icon.png",
  },
  openGraph: {
    title: "Velora ‚Äì Your Elegant Travel Companion",
    description: "Turn your travels into beautiful stories. Plan, journal, and share with Velora.",
    url: "https://velora.app",
    siteName: "Velora",
    images: [
      {
        url: "https://velora.app/og-image.jpg",
        width: 1200,
        height: 630,
        alt: "Velora ‚Äì Travel beautifully",
      },
    ],
    locale: "en_US",
    type: "website",
  },
  twitter: {
    card: "summary_large_image",
    title: "Velora ‚Äì Travel elegantly",
    description: "All-in-one travel app for planning, journaling, and sharing trips.",
    site: "@yourhandle",
    creator: "@yourhandle",
    images: ["https://velora.app/og-image.jpg"],
  },
  metadataBase: new URL("https://velora.app"),
};
```

---

### üîπ 2. **Dynamic Metadata per Page (Optional)**

For pages like `/destinations/[slug]`, you can add dynamic metadata:

```tsx
// app/destinations/[slug]/page.tsx
import { getDestinationData } from "@/lib/api";

export async function generateMetadata({ params }) {
  const data = await getDestinationData(params.slug);

  return {
    title: `${data.name} ‚Äì Velora`,
    description: data.summary,
    openGraph: {
      title: `${data.name} ‚Äì Travel with Velora`,
      description: data.summary,
      images: [data.coverImage],
    },
    twitter: {
      title: `${data.name} ‚Äì Velora`,
      description: data.summary,
      images: [data.coverImage],
    },
  };
}
```

---

### üîπ 3. **Add Web Manifest for PWA Support**

Add a manifest:

```json
// public/manifest.json
{
  "name": "Velora",
  "short_name": "Velora",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#ffffff",
  "description": "Plan, document, and share your travels with Velora.",
  "icons": [
    {
      "src": "/icons/icon-192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "/icons/icon-512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ]
}
```

Then link to it in `layout.tsx` using metadata:

```tsx
manifest: "/manifest.json",
```

---

### üîπ 4. **Add Favicon & Social Image**

* Place a `favicon.ico` and `apple-touch-icon.png` in `/public`
* Add an Open Graph image (`og-image.jpg`) for social sharing (ideally 1200x630)

---

### üõ†Ô∏è Optional Enhancements

#### Robots and Sitemap:

```txt
// public/robots.txt
User-agent: *
Allow: /
Sitemap: https://velora.app/sitemap.xml
```

#### Structured Data (JSON-LD):

Inject in `<head>` for search engines to better understand the app:

```tsx
<script
  type="application/ld+json"
  dangerouslySetInnerHTML={{
    __html: JSON.stringify({
      "@context": "https://schema.org",
      "@type": "WebApplication",
      name: "Velora",
      url: "https://velora.app",
      description: "Velora helps you plan, document, and share your travel experiences.",
      applicationCategory: "TravelApplication",
      operatingSystem: "iOS, Android, Web",
    }),
  }}
/>
```

---

### üìÅ Folder Recap

Your `app/` structure may look like this:

```
app/
  layout.tsx
  page.tsx
  destinations/
    [slug]/
      page.tsx
public/
  favicon.ico
  og-image.jpg
  manifest.json
  icons/
    icon-192.png
    icon-512.png
```

---

Would you like me to help generate the `og-image.jpg` with your brand style, logo, and tagline?

